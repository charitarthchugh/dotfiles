#!/usr/bin/env bash
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# Update all installed packages
sudo apt update -y
sudo apt upgrade -y
sudo apt autoremove -y
# Add repositories for apt
sudo apt install -y apt-transport-https curl gnupg software-properties-common extrepo # required to do before main application install
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
echo "deb http://packages.azlux.fr/debian/ stable main" | sudo tee /etc/apt/sources.list.d/azlux.list
wget -qO - https://azlux.fr/repo.gpg.key | sudo apt-key add -
sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"|sudo tee /etc/apt/sources.list.d/brave-browser-release.list

# Codium
sudo extrepo enable vscodium
# Wine
sudo dpkg --add-architecture i386
wget -nc https://dl.winehq.org/wine-builds/winehq.key
sudo apt-key add winehq.key
sudo add-apt-repository -y "deb https://dl.winehq.org/wine-builds/ubuntu/ $(lsb_release -cs) main"
sudo add-apt-repository -y ppa:git-core/ppa
sudo add-apt-repository -y ppa:phoerious/keepassxc
sudo add-apt-repository -y ppa:appimagelauncher-team/stable
sudo apt-add-repository -y ppa:fish-shell/release-3
# Pop-OS Repos
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 63C46DF0140D738961429F4E204DD8AEC33A7AFF
sudo add-apt-repository "deb http://apt.pop-os.org/proprietary $(lsb_release -cs) main"
sudo add-apt-repository "deb http://apt.pop-os.org/release $(lsb_release -cs) main"
sudo apt update -y
# Programs to install via apt
while read package; do
    sudo apt install -y -qq "$package"
    if [[ $? -eq 0 ]]; then
        echo "$package is installed from apt!"
    else
        echo "$package" >> apt_failed.txt
    fi
done <"${BASEDIR}/packages/apt_packages.txt"
# install packages using pipx
while read package; do
    pipx install "$package"
    if [[ $? -eq 0 ]]; then
        echo "$package is installed from pipx!"
    else
        echo "$package" >> pipx_failed.txt
    fi
done <"${BASEDIR}/packages/requirements.txt"
# Install rustup    
curl https://sh.rustup.rs -sSf | sh -s -- -y
source ~/.cargo/env
# Install packages from cargo
while read package; do
    ~/.cargo/bin/cargo install "$package" -q
    if [[ $? -eq 0 ]]; then
        echo "$package is installed from cargo!"
    else
        echo "$package" >> cargo_failed.txt
    fi
done <"${BASEDIR}/packages/cargo.txt"
while read package; do
    codium --install-extension "$package"
    if [[ $? -eq 0 ]]; then
        echo "$package is installed from codium!"
    else
        echo "$package" >>codium_failed.txt
    fi
done < "$BASEDIR/packages/codium-extensions.txt"
while read package; do
    code --install-extension "$package"
    if [[ $? -eq 0 ]]; then
        echo "$package is installed from code!"
    else
        echo "$package" >>code_failed.txt
    fi
done < "$BASEDIR/packages/code-extensions.txt"
# Snap section- cannot use loop for snaps that need --classic
sudo snap install --classic intellij-idea-ultimate
sudo snap install --classic pycharm-professional
sudo snap install --classic code
sudo snap install --classic codium
sudo snap install --classic flutter
sudo snap install starship glow hugo

# Set GTK Themes
mkdir -p $HOME/Dev/GTK
cd $HOME/Dev/GTK
git clone https://github.com/vinceliuice/WhiteSur-gtk-theme
git clone https://github.com/vinceliuice/WhiteSur-icon-theme
git clone https://github.com/vinceliuice/WhiteSur-cursors
sudo ./WhiteSur-gtk-theme/install.sh -t blue -c dark -i ubuntu
./WhiteSur-icon-theme/install.sh
./WhiteSur-cursors/install.sh
sudo ./tweaks.sh -F
gsettings set org.gnome.desktop.interface icon-theme "WhiteSur-dark"
# gsettings set org.gnome.desktop.interface gtk-theme "WhiteSur-dark" # do not use theme by default because it will render system unusible if requirements are not satisfied
gsettings set org.gnome.desktop.interface cursor-theme "WhiteSur-dark"

cd $HOME
# Setup dotfiles
git clone --recursive https://github.com/charitarthchugh/dotfiles $HOME/dotfiles/
eval ${BASEDIR}/install-dotfiles

# Add Flatpak repositories
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
flatpak install -y flathub com.github.marktext.marktext com.github.tchx84.Flatseal org.onlyoffice.desktopeditors
# Install Homebrew
# /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
# Programs to install via Homebrew(brew)
# brew bundle --file ~/fre.sh/Brewfile --no-lock
# programs to install via npm
npm i -g carbon-now-cli firebase-tools is-up-cli neovim npm yarn
# Install fonts
git clone --depth 1 https://github.com/google/fonts.git $HOME/.local/share/fonts/Google
git clone --depth 1 https://github.com/ryanoasis/nerd-fonts $HOME/.local/share/fonts/nerd-fonts
fc-cache -r -v
cat apt_failed.txt
notify-send -i /usr/share/icons/gnome/32x32/emotes/face-smile-big.png "Done" "Make sure to check for any failures and restart"
notify-send "Restarting in 10 seconds" -i /usr/share/icons/gnome/32x32/status/error.png
sleep 30
eval ${BASEDIR}/scripts/do_first.sh
